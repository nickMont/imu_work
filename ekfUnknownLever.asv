function [biasState,Pout,RBI_out] = ekfUnknownLever(x0,Pin,imuMeas,gpsMeas,biasState,L0,L_cg2p,L_s2p,RBI0)
%get all time stamps. GPS is assumed to be the last measurement in terms of
%time
%Sk and nuj are only used in MMKF

%gpsMeas is [t0;gps1;gps2];

maxLeverPossible=[1;1;1];  %change to 1e7 to ignore

Sk=[]; nuj=[];

%xState = [dP;dV;eul;bg;ba;dL];
numImuMeas=length(imuMeas);
timeVec=zeros(numImuMeas+1,1);
if numImuMeas>=1
    for i=1:numImuMeas
        timeVec(i)=imuMeas{i}(1);
    end
end
timeVec(end)=gpsMeas{1}(1);

biasEstimate=biasState(10:15);
%biasEstimate=zeros(6,1);
Qimu=diag([10^-7*ones(3,1); 10^-8*ones(3,1)]);

if numImuMeas>1
    Gt=zeros(18,12);
    Ft=eye(18);
    xk = x0;
    
    %Run CF
    RR=RBI0;
    for i=1:numImuMeas
        dt=timeVec(i+1)-timeVec(i); %go through all imu and then gpstoimu time
        %[exvCF,Pin]=complimentaryFilterWithLever(dt,exvCF,imuMeas{i},Pin,biasEstimate,L_ab0-biasState(16:18));
        %[exvCF,Pin]=complimentaryFilterWithLever_v2(dt,RR,exvCF,imuMeas{i},Pin,biasEstimate,L_ab0+biasState(16:18));
        fB = imuMeas{i}(5:7);
        wB = imuMeas{i}(2:4);
        
        xk = f_imu_dyn(dt,xVar,RR,fB,wB,zeros(12,1),alphaA,alphaG,L0);
        F_local = complexStep(@(xVar) f_imu_dyn(dt,xVar,RR,fB,wB,zeros(12,1),alphaA,alphaG,L0),xk,1e-10);
        Gt = Gt + complexStep(@(vVar) f_imu_dyn(dt,xk,RR,fB,wB,vVar,alphaA,alphaG,L0),zeros(12,1),1e-9);
        Ft=F_local*Ft;
        RR = euler2dcm(x(7:9))*RR;
    end
    
    %note: biasState = [de, dx, dv, ba, bg]
    %Gammak: note that accel noise enters in body, not world, frame
    
    zk=[gpsMeas{1}(2:4); unit3(gpsMeas{1}(5:7)-gpsMeas{1}(2:4))];  %pose meas in local frame
    Rk=.02*[eye3 zer3; zer3 eye3];
    Hk=[eye3 zer3 -RR*L1b zer3 zer3 RR
        zer3 zer3 -RR*hatmat(L21) zer3 zer3 zer3];
    biaskp1=Fk*biasState;
        %biaskp1(6)=biaskp1(6)+9.81*dtt^2/2; biaskp1(9)=biaskp1(9)+9.81*dtt;
    Pkp1=Ft*Pin*Ft'+Gt*Qimu*Gt';
    Sk=Rk+Hk*Pkp1*Hk';
    Wk=Pkp1*Hk'*inv(Sk);
    nuj=zk-h_imu_meas(biasState,RBI,zeros(6,1),L_cg2p,L_s2p);
    biasState=biaskp1+Wk*nuj;
    
    %TESTING: Saturation limit for known bounds
    %biasState(16:18) = vectorSaturationF(biasState(16:18),maxLeverPossible);
    
    RBI_out = euler2dcm(biasState(7:9))*RR;
    biasState(7:9)=zeros(3,1);
    Pout = (eye(18)-Wk*H)*Pkp1*(eye(18)-Wk*H)' + Wk*R*Wk'; 
    Limu = L0+biasState(16:18);
    biasState(16:18)=zeros(3,1)
end

% if numImuMeas>1 %split for initialization
%     ewxvUp=[exvCF(1:3);imuMeas{numImuMeas}(2:4);exvCF(4:9)];
%     %ewxvUp=[exvCF(1:3);imuMeas{numImuMeas}(2:4);gpsMeas{1}(5:7)-biasState(1:3);exvCF(7:9)];
%     Pout=Pkp1-Kg*Hk*Pkp1;
%     %ewxvUp=[biasState(7:9)+ewxv;imuMeas{numImuMeas}(2:4);biasState(1:6)+defZeroLoc(4:9)];
% else
%     ewxvUp=ewxv;
%     Pout=Pin;
% end

end

